var(d)
ds%*%var(d) + mean(d)
ds*var(d)[1,1] + mean(d)
mean()
mean(d)
mean(d)
mean(d[,1])
ds*var(d)[1,1] + mean(d[,1])
d
(d - mean(d[,1]))/var(d)[1,1]
sd(d)
sd(d[,1])
ds*sd(d) + mean(d[,1])
ds*sd(d)[1] + mean(d[,1])
ds*sd(d[,1]) + mean(d[,1])
source('~/Documents/Ecole_IngeÃÅ/2A/Stage/projet_startup/Code/RL/MDP.R', echo=TRUE)
set.seed(123)
source("./MDP.R")
actions <- c(200, 250, 300)
nbCluster <- 3
distanceSession <- 10
P <- transitionMatrixForSessionOfXkm(sessions, actions, nbCluster, distanceSession)
print(P)
set.seed(123)
# Input : the running sessions in sections, actions in the MDP, the number of clusters and the distance of each section
# Output : List of the transition matrix for each action
transitionMatrixForSessionOfXkm <- function(sessions, actions, nbCluster, sessionDistance) {
nbSessions <- length(sessions)
allSessions <- data.frame()
allSessionsScaled <- data.frame()
for (i in 1:nbSessions) {
run <- sessions[[i]]
runCleaned <- preProcessDataForSectionCSV(run)
troncons <- sliceSession(runCleaned)
troncons.norm <- sapply(troncons, scale)
row.names(troncons.norm) <- row.names(troncons)
allSessions <- rbind(allSessions, cbind(session = rep(i, dim(troncons)[1]), troncons))
allSessionsScaled <- rbind(allSessionsScaled, cbind(session = rep(i, dim(troncons)[1]), troncons.norm))
}
# Les courses de 10 km
sizesSessions <- vector(mode = "numeric", length = nbSessions)
for (i in 1:nbSessions) {
sizesSessions[i] <- nrow(allSessions[allSessions$session == i, ])
}
# hist(sizesSessions, breaks = 28, col = 6)
indicesXkm <- which(sizesSessions == sessionDistance)
print(paste("Sessions of", sessionDistance, "km :"))
print(indicesXkm)
nbSessionsXkm <- length(indicesXkm)
allXkmSessionsScaled <- data.frame()
for (i in 1:nbSessionsXkm) {
allXkmSessionsScaled <- rbind(allXkmSessionsScaled, allSessionsScaled[allSessionsScaled$session == indicesXkm[i], ])
}
# kmeans
km <- kmeans(allXkmSessionsScaled[,-1], nbCluster)
# unscale
print(paste("kmeans - centers :"))
print(km$centers)
# for (i in 1:nbSessions10km) {
#   plot(allXkmSessionsScaled[allXkmSessionsScaled$session == indicesXkm[i], ]$speed, main = paste("speed each section for session", indicesXkm[i]), type = "p", pch = 20, col = km$cluster[allXkmSessionsScaled$session == indicesXkm[i]], xlab = "troncon", ylab = "speed")
# }
clustersXkmSessions <- list()
for (i in 1:nbSessionsXkm) {
clustersXkmSessions[[i]]<- km$cluster[allXkmSessionsScaled$session == indicesXkm[i]]
}
# Pour fonction matrice de transition
## Les sessions de X km
XKmSessions <- list()
for (i in 1:nbSessionsXkm) {
XKmSessions[[i]] <- allSessions[allSessions$session == indicesXkm[i], ]
}
P <- transitionMatrix(XKmSessions, clustersXkmSessions, nbCluster, actions)
return(P)
}
source("./MDP.R")
actions <- c(200, 250, 300)
nbCluster <- 3
distanceSession <- 10
P <- transitionMatrixForSessionOfXkm(sessions, actions, nbCluster, distanceSession)
print(P)
sessions <- sessions
actions <- actions
nbCluster <- nbCluster
sessionDistance <- distanceSession
nbSessions <- length(sessions)
allSessions <- data.frame()
allSessionsScaled <- data.frame()
for (i in 1:nbSessions) {
run <- sessions[[i]]
runCleaned <- preProcessDataForSectionCSV(run)
troncons <- sliceSession(runCleaned)
troncons.norm <- sapply(troncons, scale)
row.names(troncons.norm) <- row.names(troncons)
allSessions <- rbind(allSessions, cbind(session = rep(i, dim(troncons)[1]), troncons))
allSessionsScaled <- rbind(allSessionsScaled, cbind(session = rep(i, dim(troncons)[1]), troncons.norm))
}
for (i in 1:nbSessions) {
run <- sessions[[i]]
runCleaned <- preProcessDataForSectionCSV(run)
troncons <- sliceSession(runCleaned)
troncons.norm <- sapply(troncons, scale)
row.names(troncons.norm) <- row.names(troncons)
allSessions <- rbind(allSessions, cbind(session = rep(i, dim(troncons)[1]), troncons))
allSessionsScaled <- rbind(allSessionsScaled, cbind(session = rep(i, dim(troncons)[1]), troncons.norm))
}
# Les courses de 10 km
sizesSessions <- vector(mode = "numeric", length = nbSessions)
for (i in 1:nbSessions) {
sizesSessions[i] <- nrow(allSessions[allSessions$session == i, ])
}
# hist(sizesSessions, breaks = 28, col = 6)
indicesXkm <- which(sizesSessions == sessionDistance)
print(paste("Sessions of", sessionDistance, "km :"))
print(paste("Sessions of", sessionDistance, "km :"))
print(indicesXkm)
nbSessionsXkm <- length(indicesXkm)
for (i in 1:nbSessionsXkm) {
allXkmSessionsScaled <- rbind(allXkmSessionsScaled, allSessionsScaled[allSessionsScaled$session == indicesXkm[i], ])
}
# kmeans
km <- kmeans(allXkmSessionsScaled[,-1], nbCluster)
actions <- actions
nbCluster <- nbCluster
sessionDistance <- distanceSession
nbSessions <- length(sessions)
allSessions <- data.frame()
allSessionsScaled <- data.frame()
for (i in 1:nbSessions) {
run <- sessions[[i]]
runCleaned <- preProcessDataForSectionCSV(run)
troncons <- sliceSession(runCleaned)
troncons.norm <- sapply(troncons, scale)
row.names(troncons.norm) <- row.names(troncons)
allSessions <- rbind(allSessions, cbind(session = rep(i, dim(troncons)[1]), troncons))
allSessionsScaled <- rbind(allSessionsScaled, cbind(session = rep(i, dim(troncons)[1]), troncons.norm))
}
for (i in 1:nbSessions) {
run <- sessions[[i]]
runCleaned <- preProcessDataForSectionCSV(run)
troncons <- sliceSession(runCleaned)
troncons.norm <- sapply(troncons, scale)
row.names(troncons.norm) <- row.names(troncons)
allSessions <- rbind(allSessions, cbind(session = rep(i, dim(troncons)[1]), troncons))
allSessionsScaled <- rbind(allSessionsScaled, cbind(session = rep(i, dim(troncons)[1]), troncons.norm))
}
# Les courses de 10 km
sizesSessions <- vector(mode = "numeric", length = nbSessions)
# Les courses de 10 km
sizesSessions <- vector(mode = "numeric", length = nbSessions)
for (i in 1:nbSessions) {
sizesSessions[i] <- nrow(allSessions[allSessions$session == i, ])
}
# hist(sizesSessions, breaks = 28, col = 6)
indicesXkm <- which(sizesSessions == sessionDistance)
print(paste("Sessions of", sessionDistance, "km :"))
print(indicesXkm)
nbSessionsXkm <- length(indicesXkm)
allXkmSessionsScaled <- data.frame()
for (i in 1:nbSessionsXkm) {
allXkmSessionsScaled <- rbind(allXkmSessionsScaled, allSessionsScaled[allSessionsScaled$session == indicesXkm[i], ])
}
# kmeans
km <- kmeans(allXkmSessionsScaled[,-1], nbCluster)
km$cluster
# Unscale
centers <- km$centers
centers
allXkmSessionsScaled[km$cluster == 1,]
mean(allXkmSessionsScaled)
sapply(allXkmSessionsScaled, mean)
allXkmSessions <- data.frame()
allXkmSessionsScaled <- data.frame()
for (i in 1:nbSessionsXkm) {
allXkmSessions <- rbind(allXkmSessions, allXkmSessions[allXkmSessions$session == indicesXkm[i], ])
allXkmSessionsScaled <- rbind(allXkmSessionsScaled, allSessionsScaled[allSessionsScaled$session == indicesXkm[i], ])
}
allXkmSessions
allXkmSessions <- data.frame()
allXkmSessionsScaled <- data.frame()
for (i in 1:nbSessionsXkm) {
allXkmSessions <- rbind(allXkmSessions, allSessions[allSessions$session == indicesXkm[i], ])
allXkmSessionsScaled <- rbind(allXkmSessionsScaled, allSessionsScaled[allSessionsScaled$session == indicesXkm[i], ])
}
allXkmSessions <- data.frame()
allXkmSessionsScaled <- data.frame()
for (i in 1:nbSessionsXkm) {
allXkmSessions <- rbind(allXkmSessions, allSessions[allSessions$session == indicesXkm[i], ])
allXkmSessionsScaled <- rbind(allXkmSessionsScaled, allSessionsScaled[allSessionsScaled$session == indicesXkm[i], ])
}
allXkmSessions <- data.frame()
allXkmSessionsScaled <- data.frame()
for (i in 1:nbSessionsXkm) {
allXkmSessions <- rbind(allXkmSessions, allSessions[allSessions$session == indicesXkm[i], ])
allXkmSessionsScaled <- rbind(allXkmSessionsScaled, allSessionsScaled[allSessionsScaled$session == indicesXkm[i], ])
}
allSessions
sapply(allXkmSessions, mean)
sapply(allXkmSessions, sd)
# Unscale
centers <- km$centers
meanAll <- sapply(allXkmSessions, mean)
sdAll <- sapply(allXkmSessions, sd)
meanAll
km$centers
# Unscale
centers <- km$centers
meanAll <- sapply(allXkmSessions, mean)[,-1]
sdAll <- sapply(allXkmSessions, sd)[,-1]
# Unscale
centers <- km$centers
meanAll <- sapply(allXkmSessions, mean)[-1]
sdAll <- sapply(allXkmSessions, sd)[-1]
meanAll
km$centers
# kmeans
km <- kmeans(allXkmSessionsScaled[,-1], nbCluster)
# Unscale
centers <- km$centers
meanAll <- sapply(allXkmSessions, mean)[-1]
sdAll <- sapply(allXkmSessions, sd)[-1]
for (i in 1:ncol(km$centers)) {
centers[,i] <- centers[,i] * sdAll[i] + meanAll[i]
}
print(paste("kmeans - centers :"))
print(centers)
source("./MDP.R")
actions <- c(200, 250, 300)
nbCluster <- 3
distanceSession <- 10
P <- transitionMatrixForSessionOfXkm(sessions, actions, nbCluster, distanceSession)
P <- transitionMatrixForSessionOfXkm(sessions, actions, nbCluster, distanceSession)
print(P)
source("./MDP.R")
actions <- c(200, 250, 300)
nbCluster <- 3
distanceSession <- 10
P <- transitionMatrixForSessionOfXkm(sessions, actions, nbCluster, distanceSession)
P <- transitionMatrixForSessionOfXkm(sessions, actions, nbCluster, distanceSession)
print(P)
set.seed(123)
source("./MDP.R")
set.seed(123)
actions <- c(200, 250, 300)
nbCluster <- 3
distanceSession <- 10
P <- transitionMatrixForSessionOfXkm(sessions, actions, nbCluster, distanceSession)
P <- transitionMatrixForSessionOfXkm(sessions, actions, nbCluster, distanceSession)
print(P)
set.seed(123)
# Input : the running sessions in sections, actions in the MDP, the number of clusters and the distance of each section
# Output : List of the transition matrix for each action
transitionMatrixForSessionOfXkm <- function(sessions, actions, nbCluster, sessionDistance) {
nbSessions <- length(sessions)
allSessions <- data.frame()
allSessionsScaled <- data.frame()
for (i in 1:nbSessions) {
run <- sessions[[i]]
runCleaned <- preProcessDataForSectionCSV(run)
troncons <- sliceSession(runCleaned)
troncons.norm <- sapply(troncons, scale)
row.names(troncons.norm) <- row.names(troncons)
allSessions <- rbind(allSessions, cbind(session = rep(i, dim(troncons)[1]), troncons))
allSessionsScaled <- rbind(allSessionsScaled, cbind(session = rep(i, dim(troncons)[1]), troncons.norm))
}
# Les courses de 10 km
sizesSessions <- vector(mode = "numeric", length = nbSessions)
for (i in 1:nbSessions) {
sizesSessions[i] <- nrow(allSessions[allSessions$session == i, ])
}
# hist(sizesSessions, breaks = 28, col = 6)
indicesXkm <- which(sizesSessions == sessionDistance)
print(paste("Sessions of", sessionDistance, "km :"))
print(indicesXkm)
nbSessionsXkm <- length(indicesXkm)
allXkmSessions <- data.frame()
allXkmSessionsScaled <- data.frame()
for (i in 1:nbSessionsXkm) {
allXkmSessions <- rbind(allXkmSessions, allSessions[allSessions$session == indicesXkm[i], ])
allXkmSessionsScaled <- rbind(allXkmSessionsScaled, allSessionsScaled[allSessionsScaled$session == indicesXkm[i], ])
}
# kmeans
km <- kmeans(allXkmSessionsScaled[,-1], nbCluster)
# The centers (unscale)
centers <- km$centers
meanAll <- sapply(allXkmSessions, mean)[-1]
sdAll <- sapply(allXkmSessions, sd)[-1]
for (i in 1:ncol(km$centers)) {
centers[,i] <- centers[,i] * sdAll[i] + meanAll[i]
}
print(paste("kmeans - centers :"))
print(centers)
# for (i in 1:nbSessions10km) {
#   plot(allXkmSessionsScaled[allXkmSessionsScaled$session == indicesXkm[i], ]$speed, main = paste("speed each section for session", indicesXkm[i]), type = "p", pch = 20, col = km$cluster[allXkmSessionsScaled$session == indicesXkm[i]], xlab = "troncon", ylab = "speed")
# }
clustersXkmSessions <- list()
for (i in 1:nbSessionsXkm) {
clustersXkmSessions[[i]]<- km$cluster[allXkmSessionsScaled$session == indicesXkm[i]]
}
# Pour fonction matrice de transition
## Les sessions de X km
XKmSessions <- list()
for (i in 1:nbSessionsXkm) {
XKmSessions[[i]] <- allSessions[allSessions$session == indicesXkm[i], ]
}
P <- transitionMatrix(XKmSessions, clustersXkmSessions, nbCluster, actions)
return(P)
}
source("./MDP.R")
set.seed(123)
actions <- c(200, 250, 300)
nbCluster <- 3
distanceSession <- 10
P <- transitionMatrixForSessionOfXkm(sessions, actions, nbCluster, distanceSession)
print(P)
set.seed(123)
# Input : the running sessions in sections, actions in the MDP, the number of clusters and the distance of each section
# Output : List of the transition matrix for each action
transitionMatrixForSessionOfXkm <- function(sessions, actions, nbCluster, sessionDistance) {
nbSessions <- length(sessions)
allSessions <- data.frame()
allSessionsScaled <- data.frame()
for (i in 1:nbSessions) {
run <- sessions[[i]]
runCleaned <- preProcessDataForSectionCSV(run)
troncons <- sliceSession(runCleaned)
troncons.norm <- sapply(troncons, scale)
row.names(troncons.norm) <- row.names(troncons)
allSessions <- rbind(allSessions, cbind(session = rep(i, dim(troncons)[1]), troncons))
allSessionsScaled <- rbind(allSessionsScaled, cbind(session = rep(i, dim(troncons)[1]), troncons.norm))
}
# Les courses de 10 km
sizesSessions <- vector(mode = "numeric", length = nbSessions)
for (i in 1:nbSessions) {
sizesSessions[i] <- nrow(allSessions[allSessions$session == i, ])
}
# hist(sizesSessions, breaks = 28, col = 6)
indicesXkm <- which(sizesSessions == sessionDistance)
print(paste("Sessions of", sessionDistance, "km :"))
print(indicesXkm)
nbSessionsXkm <- length(indicesXkm)
allXkmSessions <- data.frame()
allXkmSessionsScaled <- data.frame()
for (i in 1:nbSessionsXkm) {
allXkmSessions <- rbind(allXkmSessions, allSessions[allSessions$session == indicesXkm[i], ])
allXkmSessionsScaled <- rbind(allXkmSessionsScaled, allSessionsScaled[allSessionsScaled$session == indicesXkm[i], ])
}
# kmeans
km <- kmeans(allXkmSessionsScaled[,-1], nbCluster)
# The centers (unscale)
centers <- km$centers
meanAll <- sapply(allXkmSessions, mean)[-1]
sdAll <- sapply(allXkmSessions, sd)[-1]
for (i in 1:ncol(km$centers)) {
centers[,i] <- centers[,i] * sdAll[i] + meanAll[i]
}
print(paste("kmeans - centers :"))
print(centers)
# for (i in 1:nbSessions10km) {
#   plot(allXkmSessionsScaled[allXkmSessionsScaled$session == indicesXkm[i], ]$speed, main = paste("speed each section for session", indicesXkm[i]), type = "p", pch = 20, col = km$cluster[allXkmSessionsScaled$session == indicesXkm[i]], xlab = "troncon", ylab = "speed")
# }
clustersXkmSessions <- list()
for (i in 1:nbSessionsXkm) {
clustersXkmSessions[[i]]<- km$cluster[allXkmSessionsScaled$session == indicesXkm[i]]
}
# Pour fonction matrice de transition
## Les sessions de X km
XKmSessions <- list()
for (i in 1:nbSessionsXkm) {
XKmSessions[[i]] <- allSessions[allSessions$session == indicesXkm[i], ]
}
P <- transitionMatrix(XKmSessions, clustersXkmSessions, nbCluster, actions)
return(P)
}
source("./MDP.R")
set.seed(123)
actions <- c(200, 250, 300)
nbCluster <- 3
distanceSession <- 10
P <- transitionMatrixForSessionOfXkm(sessions, actions, nbCluster, distanceSession)
print(P)
set.seed(123)
# Input : the running sessions in sections, actions in the MDP, the number of clusters and the distance of each section
# Output : List of the transition matrix for each action
transitionMatrixForSessionOfXkm <- function(sessions, actions, nbCluster, sessionDistance) {
nbSessions <- length(sessions)
allSessions <- data.frame()
allSessionsScaled <- data.frame()
for (i in 1:nbSessions) {
run <- sessions[[i]]
runCleaned <- preProcessDataForSectionCSV(run)
troncons <- sliceSession(runCleaned)
troncons.norm <- sapply(troncons, scale)
row.names(troncons.norm) <- row.names(troncons)
allSessions <- rbind(allSessions, cbind(session = rep(i, dim(troncons)[1]), troncons))
allSessionsScaled <- rbind(allSessionsScaled, cbind(session = rep(i, dim(troncons)[1]), troncons.norm))
}
# Les courses de 10 km
sizesSessions <- vector(mode = "numeric", length = nbSessions)
for (i in 1:nbSessions) {
sizesSessions[i] <- nrow(allSessions[allSessions$session == i, ])
}
# hist(sizesSessions, breaks = 28, col = 6)
indicesXkm <- which(sizesSessions == sessionDistance)
print(paste("Sessions of", sessionDistance, "km :"))
print(indicesXkm)
nbSessionsXkm <- length(indicesXkm)
allXkmSessions <- data.frame()
allXkmSessionsScaled <- data.frame()
for (i in 1:nbSessionsXkm) {
allXkmSessions <- rbind(allXkmSessions, allSessions[allSessions$session == indicesXkm[i], ])
allXkmSessionsScaled <- rbind(allXkmSessionsScaled, allSessionsScaled[allSessionsScaled$session == indicesXkm[i], ])
}
# kmeans
km <- kmeans(allXkmSessionsScaled[,-1], nbCluster)
# The centers (unscale)
centers <- km$centers
meanAll <- sapply(allXkmSessions, mean)[-1]
sdAll <- sapply(allXkmSessions, sd)[-1]
for (i in 1:ncol(km$centers)) {
centers[,i] <- centers[,i] * sdAll[i] + meanAll[i]
}
print(paste("kmeans - centers :"))
print(centers)
# for (i in 1:nbSessions10km) {
#   plot(allXkmSessionsScaled[allXkmSessionsScaled$session == indicesXkm[i], ]$speed, main = paste("speed each section for session", indicesXkm[i]), type = "p", pch = 20, col = km$cluster[allXkmSessionsScaled$session == indicesXkm[i]], xlab = "troncon", ylab = "speed")
# }
clustersXkmSessions <- list()
for (i in 1:nbSessionsXkm) {
clustersXkmSessions[[i]]<- km$cluster[allXkmSessionsScaled$session == indicesXkm[i]]
}
# Pour fonction matrice de transition
## Les sessions de X km
XKmSessions <- list()
for (i in 1:nbSessionsXkm) {
XKmSessions[[i]] <- allSessions[allSessions$session == indicesXkm[i], ]
}
P <- transitionMatrix(XKmSessions, clustersXkmSessions, nbCluster, actions)
return(P)
}
source("./MDP.R")
set.seed(123)
actions <- c(200, 250, 300)
nbCluster <- 3
distanceSession <- 10
P <- transitionMatrixForSessionOfXkm(sessions, actions, nbCluster, distanceSession)
print(P)
set.seed(123)
# Input : the running sessions in sections, actions in the MDP, the number of clusters and the distance of each section
# Output : List of the transition matrix for each action
transitionMatrixForSessionOfXkm <- function(sessions, actions, nbCluster, sessionDistance) {
nbSessions <- length(sessions)
allSessions <- data.frame()
allSessionsScaled <- data.frame()
for (i in 1:nbSessions) {
run <- sessions[[i]]
runCleaned <- preProcessDataForSectionCSV(run)
troncons <- sliceSession(runCleaned)
troncons.norm <- sapply(troncons, scale)
row.names(troncons.norm) <- row.names(troncons)
allSessions <- rbind(allSessions, cbind(session = rep(i, dim(troncons)[1]), troncons))
allSessionsScaled <- rbind(allSessionsScaled, cbind(session = rep(i, dim(troncons)[1]), troncons.norm))
}
# Les courses de 10 km
sizesSessions <- vector(mode = "numeric", length = nbSessions)
for (i in 1:nbSessions) {
sizesSessions[i] <- nrow(allSessions[allSessions$session == i, ])
}
# hist(sizesSessions, breaks = 28, col = 6)
indicesXkm <- which(sizesSessions == sessionDistance)
print(paste("Sessions of", sessionDistance, "km :"))
print(indicesXkm)
nbSessionsXkm <- length(indicesXkm)
allXkmSessions <- data.frame()
allXkmSessionsScaled <- data.frame()
for (i in 1:nbSessionsXkm) {
allXkmSessions <- rbind(allXkmSessions, allSessions[allSessions$session == indicesXkm[i], ])
allXkmSessionsScaled <- rbind(allXkmSessionsScaled, allSessionsScaled[allSessionsScaled$session == indicesXkm[i], ])
}
# kmeans
km <- kmeans(allXkmSessionsScaled[,-1], nbCluster)
# The centers (unscale)
centers <- km$centers
meanAll <- sapply(allXkmSessions, mean)[-1]
sdAll <- sapply(allXkmSessions, sd)[-1]
for (i in 1:ncol(km$centers)) {
centers[,i] <- centers[,i] * sdAll[i] + meanAll[i]
}
print(paste("kmeans - centers :"))
print(centers)
# for (i in 1:nbSessions10km) {
#   plot(allXkmSessionsScaled[allXkmSessionsScaled$session == indicesXkm[i], ]$speed, main = paste("speed each section for session", indicesXkm[i]), type = "p", pch = 20, col = km$cluster[allXkmSessionsScaled$session == indicesXkm[i]], xlab = "troncon", ylab = "speed")
# }
clustersXkmSessions <- list()
for (i in 1:nbSessionsXkm) {
clustersXkmSessions[[i]]<- km$cluster[allXkmSessionsScaled$session == indicesXkm[i]]
}
# Pour fonction matrice de transition
## Les sessions de X km
XKmSessions <- list()
for (i in 1:nbSessionsXkm) {
XKmSessions[[i]] <- allSessions[allSessions$session == indicesXkm[i], ]
}
P <- transitionMatrix(XKmSessions, clustersXkmSessions, nbCluster, actions)
return(P)
}
source("./MDP.R")
set.seed(123)
actions <- c(200, 250, 300, 450)
nbCluster <- 3
distanceSession <- 10
P <- transitionMatrixForSessionOfXkm(sessions, actions, nbCluster, distanceSession)
print(P)
