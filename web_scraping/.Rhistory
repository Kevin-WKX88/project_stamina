source('~/Documents/Ecole_Inge패/2A/Stage/projet_startup/web_scraping/getAllClean.R', echo=TRUE)
View(cleanAll)
df <- getRuns(./runs_clean)
df <- getRuns("./runs_clean")
df
test <- getRuns("./runs_clean")
df
a <- list()
a
a[[1]]
a[[1]] <- 1
a
a[[2]] <- 33
a
a <- append(a. 3)
a <- append(a, 3)
a
rm(list=ls())
knitr::opts_chunk$set(echo = TRUE)
library(trackeR)
source("Functions/k-means.R")
source("Functions/troncons.R")
fp <- list.files("../Data/DataCSV/Urutty", full.names = TRUE)
sessions <- list()
for(k in 1:length(fp)){
if(substr(fp[k],nchar(fp[k])-2, nchar(fp[k])) == "csv"){
dftemp <- read.csv(fp[k])
sessions[[k]] <- dftemp
}
}
print(sessions[[2]])
nbSessions <- length(sessions)
print(paste("nb of running sessions =", nbSessions))
sessions[[1]]
sessions[[1]]
sessions[[2
]]
sessions[[2
]]
sessions[[2
]]
source('~/Documents/Ecole_Inge패/2A/Stage/projet_startup/web_scraping/getAllClean.R', echo=TRUE)
source('~/Documents/Ecole_Inge패/2A/Stage/projet_startup/web_scraping/getAllClean.R', echo=TRUE)
# return liste avec chaque course (csv) d'un dossier
getRuns <- function(path){
l <- list()
fp <- list.files(paste0(path),full.names = TRUE)
for(k in 1:length(fp)){
if(substr(fp[k],nchar(fp[k])-2,nchar(fp[k])) == "csv"){
dftemp <- read.csv(paste0(fp[k]))
na <- NAline(dftemp)
if(!is.null(na)){
print(paste(k,"eme fichier,lignes:",NAline(dftemp)))
}
l[[k]] <- dftemp
}
}
return(df)
}
test <- getRuns("./runs_clean")
test
source('~/Documents/Ecole_Inge패/2A/Stage/projet_startup/web_scraping/getAllClean.R', echo=TRUE)
df <- getRuns("./runs_clen")
df <- getRuns("./runs_clean")
l <- list()
l <- append(l, 1)
l[[1]] <- 2
l
l <- append(l, 1)
l
l[[k]] <- dftemp
# return liste avec chaque course (csv) d'un dossier
getRuns <- function(path){
l <- list()
fp <- list.files(paste0(path),full.names = TRUE)
for(k in 1:length(fp)){
if(substr(fp[k],nchar(fp[k])-2,nchar(fp[k])) == "csv"){
dftemp <- read.csv(paste0(fp[k]))
na <- NAline(dftemp)
if(!is.null(na)){
print(paste(k,"eme fichier,lignes:",NAline(dftemp)))
}
l[[k]] <- dftemp
}
}
return(l)
}
df <- getRuns("./runs_clean")
df
df[[1]]
rm(list=ls())
knitr::opts_chunk$set(echo = TRUE)
library(trackeR)
source("Functions/k-means.R")
source("Functions/troncons.R")
fp <- list.files("../Data/DataCSV/Urutty", full.names = TRUE)
sessions <- list()
for(k in 1:length(fp)){
if(substr(fp[k],nchar(fp[k])-2, nchar(fp[k])) == "csv"){
dftemp <- read.csv(fp[k])
sessions[[k]] <- dftemp
}
}
print(sessions[[2]])
nbSessions <- length(sessions)
print(paste("nb of running sessions =", nbSessions))
df <- sessions[[74]]
runCleaned <- preProcessDataForSectionCSV(df)
troncons <- sliceSession(runCleaned)
k.avg <- 0
nbSessionsClean <- nbSessions
set.seed(1)
for (i in 1:nbSessions) {
# print(i)
run <- sessions[[i]]
runCleaned <- preProcessDataForSectionCSV(run)
troncons <- sliceSession(runCleaned)
# Remove "distance" variable
troncons <- troncons[, -1]
n <- dim(troncons)[1]
p <- dim(troncons)[2]
troncons.norm <- sapply(troncons, scale)
row.names(troncons.norm) <- row.names(troncons)
# A changer
if (n == 2) {
nbSessionsClean <- nbSessionsClean - 1
next
}
kBest <- bestK(troncons.norm, n-1)
if (kBest == 0) {
nbSessionsClean <- nbSessionsClean - 1
kBest <- 1
}
k.avg <- k.avg + kBest
km <- kmeans(troncons.norm, kBest)
indexTroncons <- 1:n
plot(indexTroncons, troncons$speed, main = paste("speed each section for session", i), type = "p", pch = 20, col = km$cluster)
}
print(paste("nb of running sessions =", nbSessionsClean))
k.avg <- k.avg/nbSessionsClean
print(paste("k moyen =", round(k.avg, 2)))
rm(list=ls())
knitr::opts_chunk$set(echo = TRUE)
library(trackeR)
source("Functions/k-means.R")
source("Functions/troncons.R")
run1 <- read.csv('../Data/DataCSV/Urutty/Urutty_2019_03_2190264846.csv')
# run1 <- data.frame(run1)
p <- dim(run1)[2]
names(run1)
run1 <- read.csv('../Data/DataCSV/Urutty/Urutty_2019_03_2190264846.csv')
# run1 <- data.frame(run1)
p <- dim(run1)[2]
names(run1)
# i <- 7
# run <- df.runs[df.runs$session == i, ]
runCleaned <- preProcessDataForSectionCSV(run1)
troncons <- sliceSession(runCleaned)
troncons <- troncons[,-1]
print(troncons)
n <- dim(troncons)[1]
p <- dim(troncons)[2]
indexTroncons <- 1:n
plot(indexTroncons, troncons$speed, main = paste("speed each section for session"), type = "p", pch = 20)
indexTroncons <- 1:n
tronconsScaled <- scale(troncons)
kBest <- bestK(tronconsScaled, n-1)
km <- kmeans(tronconsScaled, kBest)
plot(indexTroncons, troncons$speed, main = paste("speed each section - KMEANS"), type = "p", pch = 20, col = km$cluster)
fp <- list.files("../Data/DataCSV/Urutty", full.names = TRUE)
sessions <- list()
for(k in 1:length(fp)){
if(substr(fp[k],nchar(fp[k])-2, nchar(fp[k])) == "csv"){
dftemp <- read.csv(fp[k])
sessions[[k]] <- dftemp
}
}
print(sessions[[2]])
nbSessions <- length(sessions)
print(paste("nb of running sessions =", nbSessions))
df <- sessions[[74]]
runCleaned <- preProcessDataForSectionCSV(df)
troncons <- sliceSession(runCleaned)
k.avg <- 0
nbSessionsClean <- nbSessions
set.seed(1)
for (i in 1:nbSessions) {
# print(i)
run <- sessions[[i]]
runCleaned <- preProcessDataForSectionCSV(run)
troncons <- sliceSession(runCleaned)
# Remove "distance" variable
troncons <- troncons[, -1]
n <- dim(troncons)[1]
p <- dim(troncons)[2]
troncons.norm <- sapply(troncons, scale)
row.names(troncons.norm) <- row.names(troncons)
# A changer
if (n == 2) {
nbSessionsClean <- nbSessionsClean - 1
next
}
kBest <- bestK(troncons.norm, n-1)
if (kBest == 0) {
nbSessionsClean <- nbSessionsClean - 1
kBest <- 1
}
k.avg <- k.avg + kBest
km <- kmeans(troncons.norm, kBest)
indexTroncons <- 1:n
plot(indexTroncons, troncons$speed, main = paste("speed each section for session", i), type = "p", pch = 20, col = km$cluster)
}
print(paste("nb of running sessions =", nbSessionsClean))
k.avg <- k.avg/nbSessionsClean
print(paste("k moyen =", round(k.avg, 2)))
cluster <- km$cluster
cluster
P <- matrix(0, 3, 3)
cluster <- km$cluster
cluster
P <- matrix(0, 3, 3)
P
cluster <- km$cluster
cluster
P <- matrix(0, 3, 3)
for (k in 1:nbSessions) {
}
i <- 1
run <- sessions[[i]]
runCleaned <- preProcessDataForSectionCSV(run)
troncons <- sliceSession(runCleaned)
# Remove "distance" variable
troncons <- troncons[, -1]
n <- dim(troncons)[1]
p <- dim(troncons)[2]
troncons.norm <- sapply(troncons, scale)
row.names(troncons.norm) <- row.names(troncons)
km <- kmeans(troncons.norm, 3)
indexTroncons <- 1:n
plot(indexTroncons, troncons$speed, main = paste("speed each section for session", i), type = "p", pch = 20, col = km$cluster)
plot(indexTroncons, troncons$heart_rate, main = paste("heart speed each section for session", i), type = "p", pch = 20, col = km$cluster)
plot(indexTroncons, troncons$cadence_running, main = paste("cadence running each section for session", i), type = "p", pch = 20, col = km$cluster)
plot(indexTroncons, troncons$elevation, main = paste("elevation each section for session", i), type = "p", pch = 20, col = km$cluster)
cluster <- km$cluster
cluster
P <- matrix(0, 3, 3)
for (k in 1:nbSessions) {
}
cluster <- km$cluster
cluster
P <- matrix(0, 3, 3)
for (i in 1:nbSessions) {
run <- sessions[[i]]
runCleaned <- preProcessDataForSectionCSV(run)
troncons <- sliceSession(runCleaned)
# Remove "distance" variable
troncons <- troncons[, -1]
n <- dim(troncons)[1]
p <- dim(troncons)[2]
troncons.norm <- sapply(troncons, scale)
row.names(troncons.norm) <- row.names(troncons)
}
i <- 1
run <- sessions[[i]]
runCleaned <- preProcessDataForSectionCSV(run)
troncons <- sliceSession(runCleaned)
# Remove "distance" variable
troncons <- troncons[, -1]
n <- dim(troncons)[1]
p <- dim(troncons)[2]
troncons.norm <- sapply(troncons, scale)
row.names(troncons.norm) <- row.names(troncons)
km <- kmeans(troncons.norm, 3)
plot(indexTroncons, troncons$speed, main = paste("speed each section for session", i), type = "p", pch = 20, col = km$cluster)
plot(indexTroncons, troncons$speed, main = paste("speed each section for session", i), type = "p", pch = 20, col = km$cluster)
cluster
cluster[1]
for(j in 1:(n-1)) {
P[cluster[j], cluster[j+1]] <- P[cluster[j], cluster[j+1]] + 1
}
O
P
P <- matrix(0, 3, 3)
for (i in 1:nbSessions) {
# i <- 1
run <- sessions[[i]]
runCleaned <- preProcessDataForSectionCSV(run)
troncons <- sliceSession(runCleaned)
# Remove "distance" variable
troncons <- troncons[, -1]
n <- dim(troncons)[1]
p <- dim(troncons)[2]
troncons.norm <- sapply(troncons, scale)
row.names(troncons.norm) <- row.names(troncons)
km <- kmeans(troncons.norm, 3)
cluster <- km$cluster
plot(indexTroncons, troncons$speed, main = paste("speed each section for session", i), type = "p", pch = 20, col = km$cluster)
for(j in 1:(n-1)) {
P[cluster[j], cluster[j+1]] <- P[cluster[j], cluster[j+1]] + 1
}
}
cluster <- km$cluster
cluster
P <- matrix(0, 3, 3)
for (i in 1:nbSessions) {
# i <- 1
run <- sessions[[i]]
runCleaned <- preProcessDataForSectionCSV(run)
troncons <- sliceSession(runCleaned)
# Remove "distance" variable
troncons <- troncons[, -1]
n <- dim(troncons)[1]
p <- dim(troncons)[2]
troncons.norm <- sapply(troncons, scale)
row.names(troncons.norm) <- row.names(troncons)
km <- kmeans(troncons.norm, 3)
cluster <- km$cluster
indexTroncons <- 1:n
plot(indexTroncons, troncons$speed, main = paste("speed each section for session", i), type = "p", pch = 20, col = km$cluster)
for(j in 1:(n-1)) {
P[cluster[j], cluster[j+1]] <- P[cluster[j], cluster[j+1]] + 1
}
}
P
P/nbSessions
cluster <- km$cluster
cluster
P <- matrix(0, 3, 3)
for (i in 1:nbSessions) {
# i <- 1
run <- sessions[[i]]
runCleaned <- preProcessDataForSectionCSV(run)
troncons <- sliceSession(runCleaned)
# Remove "distance" variable
troncons <- troncons[, -1]
n <- dim(troncons)[1]
p <- dim(troncons)[2]
troncons.norm <- sapply(troncons, scale)
row.names(troncons.norm) <- row.names(troncons)
km <- kmeans(troncons.norm, 3)
cluster <- km$cluster
indexTroncons <- 1:n
# plot(indexTroncons, troncons$speed, main = paste("speed each section for session", i), type = "p", pch = 20, col = km$cluster)
for(j in 1:(n-1)) {
P[cluster[j], cluster[j+1]] <- P[cluster[j], cluster[j+1]] + 1
}
}
print(P)
P/nbSessions
cluster <- km$cluster
cluster
P <- matrix(0, 3, 3)
for (i in 1:nbSessions) {
# i <- 1
run <- sessions[[i]]
runCleaned <- preProcessDataForSectionCSV(run)
troncons <- sliceSession(runCleaned)
# Remove "distance" variable
troncons <- troncons[, -1]
n <- dim(troncons)[1]
p <- dim(troncons)[2]
troncons.norm <- sapply(troncons, scale)
row.names(troncons.norm) <- row.names(troncons)
km <- kmeans(troncons.norm, 3)
cluster <- km$cluster
indexTroncons <- 1:n
# plot(indexTroncons, troncons$speed, main = paste("speed each section for session", i), type = "p", pch = 20, col = km$cluster)
for(j in 1:(n-1)) {
P[cluster[j], cluster[j+1]] <- P[cluster[j], cluster[j+1]] + 1
}
}
print(P)
P/nbSessions
cluster <- km$cluster
cluster
seed(123)
cluster <- km$cluster
cluster
set.seed(123)
P <- matrix(0, 3, 3)
for (i in 1:nbSessions) {
# i <- 1
run <- sessions[[i]]
runCleaned <- preProcessDataForSectionCSV(run)
troncons <- sliceSession(runCleaned)
# Remove "distance" variable
troncons <- troncons[, -1]
n <- dim(troncons)[1]
p <- dim(troncons)[2]
troncons.norm <- sapply(troncons, scale)
row.names(troncons.norm) <- row.names(troncons)
km <- kmeans(troncons.norm, 3)
cluster <- km$cluster
indexTroncons <- 1:n
# plot(indexTroncons, troncons$speed, main = paste("speed each section for session", i), type = "p", pch = 20, col = km$cluster)
for(j in 1:(n-1)) {
P[cluster[j], cluster[j+1]] <- P[cluster[j], cluster[j+1]] + 1
}
}
print(P)
P/nbSessions
cluster <- km$cluster
cluster
set.seed(123)
P <- matrix(0, 3, 3)
for (i in 1:nbSessions) {
# i <- 1
run <- sessions[[i]]
runCleaned <- preProcessDataForSectionCSV(run)
troncons <- sliceSession(runCleaned)
# Remove "distance" variable
troncons <- troncons[, -1]
n <- dim(troncons)[1]
p <- dim(troncons)[2]
troncons.norm <- sapply(troncons, scale)
row.names(troncons.norm) <- row.names(troncons)
km <- kmeans(troncons.norm, 3)
cluster <- km$cluster
indexTroncons <- 1:n
# plot(indexTroncons, troncons$speed, main = paste("speed each section for session", i), type = "p", pch = 20, col = km$cluster)
for(j in 1:(n-1)) {
P[cluster[j], cluster[j+1]] <- P[cluster[j], cluster[j+1]] + 1
}
}
print(P)
P/nbSessions
P
sum(P)
apply(P, sum)
sapply(P, sum)
sum(P[1:3,])
sum(P[1,])
sum(P[2,])
sum(P[3,])
sum(P[,1])
sum(P[,2])
sum(P[,3])
P[1:3,]
P[1,]
for (i in 1:3) {
P[i,] <- P[i,]/sum(P[i,])
}
P
